/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/* This is a MontiCore stable grammar.
 * Adaptations -- if any -- are conservative. */

/**
 *  This component grammar extends Statecharts with the
 *  completeness and incompletess keywords that are used to
 *  define, whether a list for example of states is complete
 *  or complete.
 *
 *  This grammar is part of a hierarchy of Statechart components, namely
 *  * SCBasis.mc4
 *  * ^- SCActions.mc4
 *  *    ^- SCDoActions.mc4
 *  *    ^- SCTransitions4Code.mc4
 *  *    ^- SCTransitions4Modelling.mc4
 *  * ^- SCCompleteness.mc4
 *  * ^- SCStateHierarchy.mc4
 *  *    ^- SCStateInvariants.mc4
 *  and two alternative grammars composing most of it:
 *  * UMLStatecharts.mc4 (based on Events)
 *  * TriggeredStatecharts.mc4 (based on regular triggers and Port-Values)
 *
 *  This changes the semantics of a Statechart
 *  (e.g. with respects to completion, refactoring and refinement)
 *  as discussed in [Rum16, Rum17], where Statecharts
 *  are defined as a specification language and part of the UML/P.
 *
 * if needed add in your own extending grammar:
 *   splittoken "(...)";
 */

component grammar SCCompleteness extends SCBasis {

  SCCompleteness implements SCStateElement, SCStatechartElement =
    complete:["(c)"] | incomplete:["(...)"];

}
