/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

import de.monticore.statements.*;

/**
  This grammar comprises all provided variants of bodies for transitions,
  actions and states (except for the empty state body provided by SCBasis)
  for different purposes.

  Furthermore, this grammar provides the Event interface and its default
  implementation used for transitions triggered by events.

  Integration of these variants can be done by overriding or delegation.
  Example:
    by overriding:  AcceptorTBody implements SCTBody;
    by delegation:  MyBody implements SCTBody = AcceptorTBody | GuardTBody;
*/
component grammar SCBodies extends SCBasis, MCStatementsBasis {

  interface SCEvent;

  SCMessage implements SCEvent = name:MCQualifiedName Arguments?;


  /* Bodies intended to be used for transitions */

  AcceptorTBody = // Acceptor statecharts (+ CoCo if no pre is allowed)
    pre:SCCondition? SCEvent;

  UMLTBody =  // UML-like transition body
    pre:SCCondition? SCEvent? ("/" MCBlockStatement)? ;

  GuardTBody = //- I/O automaten
    SCCondition;

  MAEventTBody = // MA with events
    pre:SCCondition SCEvent ("/" MCBlockStatement? post:SCCondition?)?;

  MATimeTBody = // MA with time slices
    pre:SCCondition? ("/" post:SCCondition)?;

  MTTBody = // MontiThings
    pre:SCCondition? ("/" MCBlockStatement)?;

  /* Special body variant for Actions */
  SCActionBody =  // special form for actions
    (pre:SCCondition)? ("/" MCBlockStatement? post:SCCondition?)? ;

  /* State body variant for hierarchical states */
  SCHSBody = "{" SCStateElement* "}";
}