/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/* This is a MontiCore stable grammar.
 * Adaptations -- if any -- are conservative. */

import de.monticore.statements.*;

/**
 * This grammar adds hierarchy to states, thus completing the
 * Statecharts with hierrachically decomposed states
 * (i.e. OR-states, but not AND-states (according to [Har87,Rum16])
 *
 *  This grammar is part of a hierarchy of Statechart components, namely
 *  * SCBasis.mc4
 *  * ^- SCActions.mc4
 *  *    ^- SCDoActions.mc4
 *  *    ^- SCTransitions4Code.mc4
 *  *    ^- SCTransitions4Modelling.mc4
 *  * ^- SCCompleteness.mc4
 *  * ^- SCStateHierarchy.mc4
 *  *    ^- SCStateInvariants.mc4
 *  and two alternative grammars composing most of it:
 *  * UMLStatecharts.mc4 (based on Events)
 *  * TriggeredStatecharts.mc4 (based on regular triggers and Port-Values)
 */

component grammar SCStateHierarchy extends SCBasis {

  //***********************************************************
  // State hierarchy
  //***********************************************************

  /**
    State body variant for hierarchical states.

    Please note that the { ... } do not induce a scope:
    The name hierarchy of a state space is flat:
    Each inner state is reachable from outside.
  */
  SCHierarchyBody implements SCSBody =
     "{" SCStateElement* "}";

  /**
    Internal Transitions occur within a hierarchically decomposed state
    describing a loop transition starting and ending in this same state
  */
  SCInternTransition implements SCStateElement =
    Stereotype? "->" SCTBody ";";

}
