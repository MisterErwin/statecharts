/* (c) https://github.com/MontiCore/monticore */
/* generated by template symboltable.SymbolTableCreator*/




package de.monticore.umlsc.statechart._symboltable;

import de.monticore.symboltable.IScope;
import de.monticore.symboltable.ImportStatement;
//import de.monticore.symboltable.MutableScope;
import de.monticore.types.mcbasictypes._ast.ASTMCImportStatement;
import de.monticore.umlsc.statechart._ast.ASTSCArtifact;
import de.se_rwth.commons.Names;

import java.util.ArrayList;
import java.util.Deque;
import java.util.List;
import java.util.Optional;

public class StatechartSymbolTableCreator extends StatechartSymbolTableCreatorTOP {

  public StatechartSymbolTableCreator(IStatechartScope enclosingScope) {
    super(enclosingScope);
  }

  public StatechartSymbolTableCreator(Deque<? extends IStatechartScope> scopeStack) {
    super(scopeStack);
  }

  @Override
  protected StatechartArtifactScope create_SCArtifact(ASTSCArtifact node) {
    final Optional<IStatechartScope> enclosingScope = Optional.ofNullable(getFirstCreatedScope());
    final String packageName = Names.getQualifiedName(node.getPackageList());
    final List<ImportStatement> imports = getImportStatements(node);
    return new StatechartArtifactScope(enclosingScope, packageName, imports);
  }

  private List<ImportStatement> getImportStatements(ASTSCArtifact node) {
    List<ImportStatement> imports = new ArrayList<>();
    if (node.getMCImportStatementList() != null) {
      for (ASTMCImportStatement imp : node.getMCImportStatementList()) {
        String qualifiedImport = imp.getQName();
        imports.add(new ImportStatement(qualifiedImport, imp.isStar()));
      }
    }
    return imports;
  }
}
