/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

import de.monticore.types.*;
import de.monticore.expressions.*;

/**
   This is the basis language component for Statecharts.

   It provides states and (intern) transitions along with extension points
   for state and statechart elements, state and transition bodies.

   Furthermore, it provides but not directly uses the SCCondition
   meant to be used for pre-/post-conditions and invariants.

   It uses
      * ExpressionsBasis for conditions
      * MCBasicTypes for the import statement and
      * UMLStereotype for the stereotype
      Expression and Literal are imported extension points
      that shall be filled in concrete, complete languages
      by a variety of available grammars.

*/
component grammar SCBasis extends UMLStereotype, MCBasicTypes, ExpressionsBasis {

  SCArtifact =
    ("package" package:MCQualifiedName& ";")?
    MCImportStatement*
    Statechart
  ;

  symbol scope Statechart =
    Stereotype?
    "statechart" Name? "{"
      SCStatechartElement*
    "}";

  interface SCStatechartElement;
  interface SCStateElement;

  interface SCSBody;
  interface SCTBody;

  SCEmptyBody implements SCSBody = ;

  symbol SCState implements SCStateElement, SCStatechartElement =
   SCModifier "state" Name SCSBody ";";

  SCStateList extends SCState =
     SCModifier "state" (Name || ",")+ SCSBody ";";

  SCTransition implements SCStateElement, SCStatechartElement =
   Stereotype? sourceName:Name "->" targetName:Name SCTBody ";" ;

  SCInternTransition implements SCStateElement =
    Stereotype? "->" SCTBody ";";

  SCCondition  = "[" Expression "]";

  SCModifier = Stereotype? (["initial"] | ["final"])*;
}